{
  "jobs": [
    {
      "name": "Programs",
      "type": "programs",
      "chunkSizeToRead": "500"
    },
    {
      "name": "Patients",
      "type": "patients",
      "chunkSizeToRead": "500"
    },
    {
      "name": "Appointments",
      "type": "appointments",
      "chunkSizeToRead": "500"
    },
    {
      "name": "Bed Management",
      "type": "bedManagement",
      "chunkSizeToRead": "500"
    },
    {
      "name": "Location",
      "type": "location",
      "chunkSizeToRead": "500"
    },
    {
      "name": "Operation Theater",
      "type": "operationTheater",
      "chunkSizeToRead": "500"
    },
    {
      "name": "Person",
      "type": "person",
      "chunkSizeToRead": "500",
      "groupedJobConfigs": [
        {
          "tableName": "person_attributes",
          "columnsToIgnore": [
            "primaryContact",
            "secondaryContact",
            "primaryRelative",
            "familyNameLocal",
            "givenNameLocal",
            "middleNameLocal",
            "nickName",
            "familyOrClanName",
            "Latitude",
            "Longitude",
            "National ID",
            "Patient Contact Type 1, Relationship",
            "Patient Contact Type 1, Patient Contact, comments",
            "Patient Contact Type 1, Phone",
            "Patient Contact Type 2, Relationship",
            "Patient Contact Type 2, Patient Contact, comments",
            "Patient Contact Type 2, Phone",
            "Primary Emergency Contact, Name",
            "Primary Emergency Contact, Relationship",
            "PEC, Emergency Contact, comments",
            "Primary Emergency Contact, Phone 1",
            "Secondary Emergency Contact, Name",
            "Secondary Emergency Contact, Relationship",
            "SEC, Emergency Contact, comments",
            "Secondary Emergency Contact, Phone 1",
            "CV/HP Name",
            "CV/HP Phone 1"
          ]
        },
        {
          "tableName": "person_address_default",
          "columnsToIgnore": [
            "country",
            "county_district",
            "city_village",
            "address5",
            "address6"
          ]
        },
        {
          "tableName": "person_details_default",
          "columnsToIgnore": [
            "prefix",
            "given_name",
            "middle_name",
            "family_name_prefix",
            "family_name",
            "family_name2",
            "family_name_suffix",
            "birthdate"
          ]
        }
      ]
    },
    {
      "name": "Provider",
      "type": "provider",
      "chunkSizeToRead": "500"
    },
    {
      "name": "Visits And Encounters",
      "type": "visitsAndEncounters",
      "chunkSizeToRead": "500"
    },
    {
      "name": "Medication And Orders",
      "type": "medicationAndOrders",
      "chunkSizeToRead": "500",
      "groupedJobConfigs": [
        {
          "tableName": "medication_data_default",
          "columnsToIgnore": [
            "instructions",
            "stop_notes"
          ]
        }
      ]
    },
    {
      "name": "Diagnoses And Conditions",
      "type": "diagnosesAndConditions",
      "chunkSizeToRead": "500"
    },
    {
      "name": "Bacteriology Data",
      "conceptReferenceSource": "",
      "type": "bacteriology"
    },
    {
      "name": "MetaData Dictionary",
      "type": "metadata",
      "conceptReferenceSource": ""
    },
    {
      "name": "Obs Data",
      "type": "obs",
      "incrementalUpdateConfig": {
        "updateOn": "encounter_id",
        "eventCategory": "Encounter",
        "openmrsTableName": "encounter"
      },
      "separateTableConfig": {
        "enableForAddMoreAndMultiSelect": true,
        "separateTables": [
        ]
      },
      "conceptReferenceSource": "",
      "ignoreAllFreeTextConcepts": true,
      "columnsToIgnore": [
        "Image",
        "Video"
      ]
    },
    {
      "name": "Form2 Obs Data",
      "type": "form2obs",
      "incrementalUpdateConfig": {
        "updateOn": "encounter_id",
        "eventCategory": "Encounter",
        "openmrsTableName": "encounter"
      },
      "separateTableConfig": {
        "enableForAddMoreAndMultiSelect": true,
        "separateTables": [
        ]
      },
      "conceptReferenceSource": "",
      "ignoreAllFreeTextConcepts": true,
      "includeFreeTextConceptNames": [
        "PH, NGO's VIA centre name, other",
        "PH, MOH health facility name, Other",
        "CS, Reason for presentation",
        "IC, Abnormal findings, other",
        "IC, Precancerous lesions, other",
        "IC, Confirmed malignancy diagnosis, other",
        "IC, Topography of tumour (confirmed), other female genital organs",
        "SC, Abnormal findings, other",
        "SC, Precancerous lesions, other",
        "SC, Confirmed malignancy diagnosis, other",
        "SC, Topography of tumour (confirmed), other female genital organs",
        "SC, Treatment phase, other",
        "PTMDT, Abnormal findings, other",
        "PTMDT, Precancerous lesions, other"
      ],
      "columnsToIgnore": [
        "Image"
      ]
    },
    {
      "name": "Disposition Data",
      "type": "disposition",
      "columnsToIgnore": [],
      "incrementalUpdateConfig": {
        "updateOn": "encounter_id",
        "eventCategory": "Encounter",
        "openmrsTableName": "encounter"
      }
    }
  ],
  "procedures": [
    {
      "name": "Discharge Date Procedure",
      "sourceFilePath": "classpath:procedureSql/dischargeDateProc.sql"
    },
    {
      "name": "Age Group Procedure",
      "sourceFilePath": "file:/var/www/bahmni_config/bahmni-mart/ageGroupProc.sql"
    }
  ],
  "views": [
    {
      "name": "patient_program_view",
      "sourceFilePath": "classpath:viewSql/patientProgramView.sql"
    },
    {
      "name": "patient_program_state_view",
      "sourceFilePath": "classpath:viewSql/patientProgramStateView.sql"
    },
    {
      "name": "patient_visits_encounters_view",
      "sourceFilePath": "classpath:viewSql/patientVisitsEncountersView.sql"
    },
    {
      "name": "appointment_admin_panel_view",
      "sql": "SELECT * FROM appointment_service_default LEFT OUTER JOIN service_availability_default USING (appointment_service_id, service_name)"
    },
    {
      "name": "patient_details_view",
      "sourceFilePath": "classpath:viewSql/patientDetailsView.sql"
    },
    {
      "name": "patient_information_view",
      "sql": "SELECT pd.person_id AS patient_id, pd.gender, pd.birthyear, pd.birthtime, pd.birthdate_estimated, pd.death_date, pd.deathdate_estimated, pd.cause_of_death, pad.address1, pad.address2, pad.address3, pad.start_date, pad.end_date, pa.* FROM person_details_default pd LEFT JOIN person_attributes pa ON pa.person_id = pd.person_id LEFT JOIN person_address_default pad ON pad.person_id = pd.person_id and pad.preferred = 'true'"
    },
    {
      "name": "bed_management_view",
      "sourceFilePath": "classpath:viewSql/bedManagementView.sql"
    },
    {
      "name": "bed_management_locations_view",
      "sourceFilePath": "classpath:viewSql/locationWiseDischarge.sql"
    },
    {
      "name": "patient_bed_view",
      "sourceFilePath": "classpath:viewSql/patientBedView.sql"
    },
    {
      "name": "patient_operation_theater_view",
      "sourceFilePath": "classpath:viewSql/patientOperationTheaterView.sql"
    },
    {
      "name": "patient_appointment_view",
      "sourceFilePath": "classpath:viewSql/patientAppointmentView.sql"
    },
    {
      "name": "patient_program_medication_view",
      "sourceFilePath": "classpath:viewSql/patientProgramMedicationView.sql"
    },
    {
      "name": "patient_diagnosis_condition_view",
      "sourceFilePath": "classpath:viewSql/patientDiagnosisConditionView.sql"
    },
    {
      "name": "patient_bed_tags_history_view",
      "sourceFilePath": "classpath:viewSql/patientBedTagView.sql"
    },
    {
      "name": "cohort_view",
      "sql": "WITH cte_first_vs AS (SELECT DISTINCT ON (vs.patient_program_id) vs.patient_program_id, vs.date_time_recorded::date AS first_vs_date, vs.bmi FROM \"2_vital_signs\" vs ORDER BY vs.patient_program_id, vs.date_time_recorded ASC), cte_latest_vs AS (SELECT DISTINCT ON (vs.patient_program_id) vs.patient_program_id, vs.date_time_recorded::date AS first_vs_date, vs.bmi FROM \"2_vital_signs\" vs ORDER BY vs.patient_program_id, vs.date_time_recorded DESC) SELECT ppdd.patient_id, ppdd.age_during_enrollment, age_group(ppdd.date_enrolled, TO_DATE(CONCAT('01-01-', pdd.birthyear), 'dd-MM-yyyy')) AS age_group_during_enrollment, pad2.address1 AS country, pad2.address2 AS region, pad2.address3 AS district, ppdd.patient_program_id, CASE WHEN ppdd.program_id = 1 then 'Oncogynae' WHEN ppdd.program_id = 2 THEN 'Palliative Care' ELSE NULL END AS program_name, ppdd.date_enrolled, psd.state_name AS current_state, psd.start_date AS state_start_date, ph.referral_facility, CASE WHEN ph.msf_via_centre_name IS NOT NULL THEN ph.msf_via_centre_name WHEN ph.ngo_s_via_centre_name IS NOT NULL THEN ph.ngo_s_via_centre_name WHEN ph.moh_health_facility_name IS NOT NULL THEN ph.moh_health_facility_name ELSE NULL END AS facility_name, ph.result_of_hiv_test, ph.on_antiretroviral_therapy, ph.current_antiretroviral_drugs_used, ph.last_cd4_count, CASE WHEN ph.last_cd4_count < 200 THEN '<200' WHEN ph.last_cd4_count >= 200 THEN '>=200' ELSE NULL END AS cd4_categories, ph.last_viral_load, ph.hpv_status, ph.smoker, cfv.bmi AS first_bmi, CASE WHEN cfv.bmi < 18.5 THEN '18.5 or less' WHEN cfv.bmi >= 18.5 AND cfv.bmi < 25 THEN '18.5-24.9' WHEN cfv.bmi >= 25 THEN '25 or more' ELSE NULL END AS first_bmi_categories, clv.bmi AS latest_bmi, CASE WHEN clv.bmi < 18.5 THEN '18.5 or less' WHEN clv.bmi >= 18.5 AND clv.bmi < 25 THEN '18.5-24.9' WHEN clv.bmi >= 25 THEN '25 or more' ELSE NULL END AS latest_bmi_categories, ppdd.date_completed, ppdd.program_outcome, date_part('month', age(ppdd.date_completed::date,ppdd.date_enrolled::date)) AS length_of_follow_months FROM patient_program_data_default ppdd LEFT OUTER JOIN person_details_default pdd ON ppdd.patient_id = pdd.person_id LEFT OUTER JOIN person_address_default pad2 ON ppdd.patient_id = pad2.person_id LEFT OUTER JOIN patient_state_default psd ON ppdd.patient_program_id = psd.patient_program_id LEFT OUTER JOIN \"1_patient_history\" ph ON ppdd.patient_program_id = ph.patient_program_id LEFT OUTER JOIN cte_first_vs cfv ON ppdd.patient_program_id = cfv.patient_program_id LEFT OUTER JOIN cte_latest_vs clv ON ppdd.patient_program_id = clv.patient_program_id WHERE ppdd.voided = 'false' AND psd.end_date IS NULL"
    },
    {
      "name": "oncogynae_active_patients_end_of_month",
      "sql": "WITH active_patients AS (SELECT ppdd.date_enrolled::date, CASE WHEN ppdd.date_completed IS NOT NULL THEN ppdd.date_completed::date ELSE CURRENT_DATE END AS date_completed FROM patient_program_data_default ppdd WHERE ppdd.voided = 'false' AND ppdd.program_id = 1 ORDER BY ppdd.date_enrolled), range_values AS (SELECT date_trunc('day',min(ap.date_enrolled)) AS minval, date_trunc('day',max(ap.date_completed)) AS maxval FROM active_patients ap), day_range AS (SELECT generate_series(minval,maxval,'1 day'::interval) as day FROM range_values), daily_enrollments AS (SELECT date_trunc('day', ap.date_enrolled) AS day, count(*) AS patients FROM active_patients AS ap GROUP BY 1), daily_exits AS (SELECT date_trunc('day', ap.date_completed) AS day, count(*) AS patients FROM active_patients AS ap GROUP BY 1), daily_active_patients AS (SELECT day_range.day as reporting_day, sum(daily_enrollments.patients) over (order by day_range.day asc rows between unbounded preceding and current row) AS cumulative_admissions, CASE WHEN sum(daily_exits.patients) over (order by day_range.day asc rows between unbounded preceding and current row) IS NULL THEN 0 ELSE sum(daily_exits.patients) over (order by day_range.day asc rows between unbounded preceding and current row) END AS cumulative_exits, CASE WHEN sum(daily_exits.patients) over (order by day_range.day asc rows between unbounded preceding and current row) IS NULL THEN sum(daily_enrollments.patients) over (order by day_range.day asc rows between unbounded preceding and current row) ELSE (sum(daily_enrollments.patients) over (order by day_range.day asc rows between unbounded preceding and current row)- sum(daily_exits.patients) over (order by day_range.day asc rows between unbounded preceding and current row)) END AS active_patients, CASE WHEN date(day_range.day)::date = (date_trunc('MONTH', day_range.day) + INTERVAL '1 MONTH - 1 day')::date THEN 1 END AS last_day_of_month FROM day_range LEFT OUTER JOIN daily_enrollments ON day_range.day = daily_enrollments.day LEFT OUTER JOIN daily_exits ON day_range.day = daily_exits.day) SELECT dap.reporting_day, dap.active_patients FROM daily_active_patients dap WHERE dap.last_day_of_month = 1 and dap.reporting_day > date_trunc('MONTH', CURRENT_DATE) - INTERVAL '1 year' GROUP BY dap.reporting_day, dap.active_patients"
    }
  ]
}
